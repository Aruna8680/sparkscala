package myownpractice

import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.functions._

object sales {
  def main(args:Array[String]){
  val  spark:SparkSession =SparkSession.builder().master("local").appName("sales").getOrCreate()
  spark.sparkContext.setLogLevel("ERROR")
  import spark.implicits._
  
  val sales_data =spark.read.format("csv").option("header",true).option("Inferschema",true).
                                csv("C:\\Users\\paramesh\\OneDrive\\Desktop\\newcsv\\sales.csv").toDF()
val salesdf =sales_data
salesdf.show(false)
//salesdf.printSchema()

///*find the total revenue generated *///
/// Input columns-ï»¿OrderID|ProductID|Quantity|Price|Region|

val total_revenue = salesdf.selectExpr("Quantity*Price as Revenue").agg(sum("Revenue")).first().getDouble(0)
val total_revenue1 = salesdf.selectExpr("sum(Quantity*Price) as Toatal_Revenue").limit(1)
// total_revenue1.show()
// println("total revenue:$" + total_revenue)

///*find the average price per unit for each product*///
val Avg_price =salesdf.groupBy("ProductID").agg(avg("Price").as("avg_priceperunit"))
//Avg_price .show()

val avgPrice = salesdf.groupBy(col("ProductID")).agg(expr("SUM(Price * Quantity) / SUM(Quantity)").as("AveragePricePerUnit"))
                                           .orderBy(col("ProductID").desc)
//avgPrice.show()

///find the top 5 products with the highest revenue *///

val total_revenue2 = salesdf.groupBy("ProductID").agg(expr("SUM(Price * Quantity) as Toatal_Revenue")).limit(5)
total_revenue2.show()

val revenueDF1 = salesdf.groupBy("ProductID").agg(sum(col("Quantity") * col("Price")).as("TotalRevenue"))
                                             .orderBy(col("TotalRevenue").desc).limit(5)
revenueDF1.show()

val revenueDF = salesdf.groupBy("ProductID").sum("Quantity","Price")
                       .withColumnRenamed("SUM(Quantity)", "TotalQuantity")
                       .withColumnRenamed("SUM(Price)", "TotalPrice")
                       .withColumn("TotalRevenue",expr("TotalQuantity * TotalPrice"))
                       .orderBy(col("TotalRevenue").desc).limit(5)

revenueDF.show()


///*find the total revenue generated by each region*///
val Tot_reve_region = salesdf.groupBy("Region").agg(sum(col("Quantity") * col("Price")).as("TotalRevenue"))
                                             .orderBy(col("TotalRevenue").desc)
   Tot_reve_region.show()     

val total_revenue_R= salesdf.groupBy("Region").agg(expr("SUM(Price * Quantity) as Toatal_Revenue"))
total_revenue_R.show()



  }
}